# Cursor Instructions

## Package Management
- Use pnpm for all package management operations
- Run `pnpm install` to install dependencies
- Run `pnpm add <package>` to add new dependencies
- Run `pnpm remove <package>` to remove dependencies
- Never use npm or yarn commands

## Framework & Language
- Use React for all UI components and application logic
- Use TypeScript for all code with strict type checking enabled
- Follow React best practices and conventions:
  - Use functional components with hooks
  - Properly manage component state and side effects
  - Follow React naming conventions (PascalCase for components, camelCase for functions)
  - Always define interfaces for component props
  - Implement proper component composition and reusability

## TypeScript Guidelines
- Use strict mode with all TypeScript compiler options enabled
- Define explicit types for all function parameters and return values
- Create interfaces for complex data structures and component props
- Use type guards and discriminated unions where appropriate
- Avoid using `any` type - use `unknown` with type guards instead
- Use readonly modifiers for immutable data
- Leverage TypeScript's utility types (Pick, Omit, Partial, etc.) when appropriate
- Keep type definitions close to their usage, or in shared type files for reusable types

## Styling
- Use Tailwind CSS for all styling
- Follow Tailwind conventions and utility-first approach
- Avoid custom CSS when Tailwind utilities can achieve the same result
- Use Tailwind's responsive design utilities for mobile-first development
- Leverage Tailwind's configuration for consistent theming

## Testing
- Write unit tests for all business logic
- Use industry-standard testing libraries (Jest, React Testing Library, Vitest, etc.)
- Ensure tests are executed on every build
- Aim for meaningful test coverage of critical business logic
- Write tests that are maintainable and easy to understand
- Test behavior, not implementation details

## Pull Request Guidelines
- Keep PRs small and focused on a single concern
- Each PR should address one feature, bug fix, or refactoring task
- Break large features into multiple smaller, reviewable PRs
- Write clear PR descriptions explaining the changes and their purpose
- Ensure all tests pass before creating a PR
